adlogicJobSearch.registered_search_widgets = [];
var suburbStr = "",
    suburbSubStr = "";
! function(e) {
    e.fn.extend({
        adlogicSearchWidget: function(t) {
            var a, s = {
                    searchUrl: "",
                    widgetId: "",
                    translations: {
                        locations: "Location",
                        sub_locations: "Sub-location",
                        classifications: "Classification",
                        sub_classifications: "Sub-classification",
                        worktype: "Work Type",
                        costcenter: "Cost Centre"
                    },
                    dropdownType: {
                        locations: "single",
                        classifications: "single",
                        worktypes: "flat",
                        costcenters: "flat"
                    },
                    adCounts: {
                        locations: !1,
                        classifications: !1,
                        worktypes: !1,
                        costcenters: !1
                    },
                    hideEmpty: {
                        locations: !1,
                        classifications: !1,
                        worktypes: !1,
                        costcenters: !1
                    },
                    topLevelOnly: {
                        locations: !1,
                        classifications: !1,
                        worktypes: !1,
                        costcenters: !1
                    },
                    showThirdLevel: {
                        locations: !0,
                        classifications: !0,
                        worktypes: !0,
                        costcenters: !0
                    },
                    chosenEnabled: !1,
                    useNewLocation: !1,
                    useNewLocationAPI: !1
                },
                o = (t = e.extend(s, t), {}),
                i = {
                    mapOptions: {
                        constructFieldValFromObject: function() {
                            if ("undefined" != typeof geoLocationJsonDef && MRP.StringUtil.hasData(geoLocationJsonDef)) {
                                for (var e = JSON.parse(geoLocationJsonDef), t = "", a = "", s = "", o = "", i = "", n = 0; n < e.length; n++) {
                                    var l = e[n];
                                    "locality" == l.type ? void 0 !== l.name && "" !== l.name && (a = l.name) : "administrative_area_level_1" == l.type ? void 0 !== l.name && "" !== l.name && (s = l.name) : "country" == l.type ? void 0 !== l.name && "" !== l.name && (o = l.name) : "postal_code" != l.type && "postal_code_prefix" != l.type && "postal_code_suffix" != l.type || void 0 !== l.name && "" !== l.name && (i = l.name)
                                }
                                return "" !== a && (t = a + ", "), "" !== s && (t += s + ", "), "" !== o && (t += o), "" !== i && (t += ", " + i), t
                            }
                            return ""
                        },
                        initMap: function() {
                            if (document.getElementById(t.widgetId + "-location_select_id"))
                                if ("undefined" != typeof google) {
                                    var s = document.getElementById(t.widgetId + "-location_select_id"),
                                        o = s.addEventListener ? s.addEventListener : s.attachEvent;
                                    s.addEventListener = l, s.attachEvent = l;
                                    var n = new google.maps.places.Autocomplete(s);
                                    n.setTypes(["(cities)"]), n.setFields(["address_component", "adr_address", "alt_id", "formatted_address", "geometry", "icon", "id", "name", "permanently_closed", "photo", "place_id", "plus_code", "scope", "type", "url", "utc_offset", "vicinity"]), "undefined" != typeof geoLocationJsonDef && MRP.StringUtil.hasData(geoLocationJsonDef) && (e("#" + t.widgetId + "-location_select_id").attr("geoLocationJson", geoLocationJsonDef), e("#" + t.widgetId + "-location_select_id").val(i.mapOptions.constructFieldValFromObject.apply(a))), n.addListener("place_changed", function() {
                                        var a = n.getPlace();
                                        if (a.geometry) {
                                            for (var s = [], o = {}, i = {}, l = {}, c = {}, r = (a.formatted_address, ""), d = function(e) {
                                                    for (var t in e)
                                                        if (e.hasOwnProperty(t)) return !1;
                                                    return !0
                                                }, p = 0; p < a.address_components.length; p++)
                                                for (var u = a.address_components[p], y = 0; y < u.types.length;) {
                                                    var g = u.types[y];
                                                    "locality" == g ? (o.name = u.long_name, o.type = g, o.lat = a.geometry.location.lat(), o.lng = a.geometry.location.lng(), r = u.short_name) : "administrative_area_level_1" == g ? (i.code = u.short_name, i.name = u.long_name, i.type = g) : "country" == g ? (l.code = u.short_name, l.name = u.long_name, l.type = g) : "postal_code" != g && "postal_code_prefix" != g && "postal_code_suffix" != g || (c.name = u.long_name, c.type = "postal_code"), y++
                                                }
                                            d(o) || d(l) ? alert("A suburb, state and country are required!") : (d(i) && (i.code = r, i.name = o.name, i.type = "administrative_area_level_1"), s.push(o), s.push(i), s.push(l), d(c) || s.push(c), e("#" + t.widgetId + "-location_select_id").attr("distance", 50), e("#" + t.widgetId + "-location_select_id").attr("geoLocationJson", JSON.stringify(s)))
                                        } else window.alert("No details available for input: '" + a.name + "'")
                                    })
                                } else console.error("Cannot initialise google map for " + t.widgetId + "-location_select_id because the Google API hasn't finished loading!");
                            else console.error("Cannot initialise map for " + t.widgetId + "-location_select_id because this element does not exist!");

                            function l(e, t) {
                                if ("keydown" == e) {
                                    var a = t;
                                    t = function(e) {
                                        var t = jQuery(".pac-item-selected").length > 0;
                                        if (13 == e.which && !t) {
                                            var o = jQuery.Event("keydown", {
                                                keyCode: 40,
                                                which: 40
                                            });
                                            a.apply(s, [o])
                                        }
                                        a.apply(s, [e])
                                    }
                                }
                                o.apply(s, [e, t])
                            }
                        }
                    },
                    init: function(t) {
                        a = e(this);
                        t = e.extend(s, t);
                        if (e.each(adlogicJobSearch.registered_search_widgets, function(e, t) {
                                t == a.get(0) && !0
                            }), 1 == t.chosenEnabled && (e(document).bind("adlogicJobSearch.searchWidget.init", function(e, t, a) {
                                t.find("select").chosen({
                                    width: "100%"
                                })
                            }), e(document).bind("adlogicJobSearch.searchWidget.loaded", function(e, t, a) {
                                t.find("select").trigger("chosen:updated")
                            }), e(document).bind("adlogicJobSearch.searchWidget.selectUpdate", function(e, t, a) {
                                t.find("select").trigger("chosen:updated")
                            }), e(document).bind("adlogicJobSearch.searchWidget.submit", function(e, t, a) {
                                t.find("select").trigger("chosen:updated")
                            }), e(document).bind("chosen:showing_dropdown", function(e, t) {
                                chosenObj = t.chosen, chosenObj.winnow_results(), chosenObj.container.css("zIndex", "1000"), chosenObj.search_results.get(0).scrollWidth > chosenObj.dropdown.width() && (sizeDifference = chosenObj.search_results.get(0).scrollWidth - chosenObj.dropdown.width(), chosenObj.container.width(chosenObj.search_results.get(0).scrollWidth + 30))
                            }), e(document).bind("chosen:hiding_dropdown", function(e, t) {
                                chosenObj = t.chosen, chosenObj.container.css("width", "100%"), chosenObj.container.css("zIndex", "auto")
                            })), adlogicJobSearch.registered_search_widgets = adlogicJobSearch.registered_search_widgets.concat(this), e.deparam.fragment()) {
                            var o = e.deparam.fragment();
                            e.each(o, function(e, t) {
                                switch (e.toLowerCase()) {
                                    case "indid":
                                        indIdDef = t;
                                        break;
                                    case "locid":
                                        locIdDef = t;
                                        break;
                                    case "wtid":
                                        wtIdDef = t;
                                        break;
                                    case "ccid":
                                        ccIdDef = t;
                                        break;
                                    case "keyword":
                                        keyDef = t;
                                        break;
                                    case "saltype":
                                        salaryTypeDef = t;
                                        break;
                                    case "salmin":
                                        salaryMinDef = t;
                                        break;
                                    case "salmax":
                                        salaryMaxDef = t;
                                        break;
                                    case "geolocationjson":
                                        geoLocationJsonDef = t
                                }
                            })
                        }
                        switch (e(document).trigger("adlogicJobSearch.searchWidget.init", [a, t]), i.buildDropdowns.apply(a), t.useNewLocation && document.getElementById(t.widgetId + "-location_select_id") && i.mapOptions.initMap.apply(a), e("#" + t.widgetId + "-keywords").length > 0 && "undefined" != typeof keyDef && e("#" + t.widgetId + "-keywords").val(decodeURIComponent(keyDef)), "undefined" != typeof listingTypeDef && e("#" + t.widgetId + "-listing_type").val(listingTypeDef), t.currentSalaryType = t.salary_range_settings.default_type, t.salary_range_settings.annual_package_min_val = t.salary_range_settings.annual_package_min, t.salary_range_settings.annual_package_max_val = t.salary_range_settings.annual_package_max, t.salary_range_settings.hourly_rate_min_val = t.salary_range_settings.hourly_rate_min, t.salary_range_settings.hourly_rate_max_val = t.salary_range_settings.hourly_rate_max, "undefined" != typeof salaryTypeDef && "" != salaryTypeDef && ("AnnualPackage" == salaryTypeDef ? t.salary_range_settings.default_type = "annual" : "HourlyRate" == salaryTypeDef ? t.salary_range_settings.default_type = "hourly" : t.salary_range_settings.default_type = salaryTypeDef), t.salary_range_settings.default_type) {
                            case "annual":
                                "undefined" != typeof salaryMinDef && "" != salaryMinDef && (t.salary_range_settings.annual_package_min_val = parseInt(salaryMinDef) / 1e3), "undefined" != typeof salaryMaxDef && "" != salaryMaxDef && (t.salary_range_settings.annual_package_max_val = parseInt(salaryMaxDef) / 1e3);
                                break;
                            case "hourly":
                                "undefined" != typeof salaryMinDef && "" != salaryMinDef && (t.salary_range_settings.hourly_rate_min_val = parseInt(salaryMinDef)), "undefined" != typeof salaryMaxDef && "" != salaryMaxDef && (t.salary_range_settings.hourly_rate_max_val = parseInt(salaryMaxDef))
                        }
                        if (e("#" + t.widgetId + "-salary-range").length > 0) {
                            switch (t.salary_range_settings.currentSalaryType = t.salary_range_settings.default_type, salarySliderObj = e("#" + t.widgetId + "-salary-range"), salarySliderObj.slider({
                                range: !0,
                                values: [1, 1],
                                slide: function(a, s) {
                                    switch (t.salary_range_settings.currentSalaryType) {
                                        case "annual":
                                            e("#" + t.widgetId + "-salary-switcher .ajb-salary-amount").html("$" + s.values[0] + "K - $" + s.values[1] + "K"), e("#" + t.widgetId + "-salary-min").val(1e3 * s.values[0]), t.salary_range_settings.annual_package_min_val = s.values[0], e("#" + t.widgetId + "-salary-max").val(1e3 * s.values[1]), t.salary_range_settings.annual_package_max_val = s.values[1], e("#" + t.widgetId + "-salary-type").val("AnnualPackage");
                                            break;
                                        case "hourly":
                                            e("#" + t.widgetId + "-salary-switcher .ajb-salary-amount").html("$" + s.values[0] + " - $" + s.values[1] + "/hr"), e("#" + t.widgetId + "-salary-min").val(s.values[0]), t.salary_range_settings.hourly_rate_min_val = s.values[0], e("#" + t.widgetId + "-salary-max").val(s.values[1]), t.salary_range_settings.hourly_rate_max_val = s.values[1], e("#" + t.widgetId + "-salary-type").val("HourlyRate")
                                    }
                                }
                            }), t.salary_range_settings.currentSalaryType) {
                                case "annual":
                                    salarySliderObj.slider("option", {
                                        min: parseInt(t.salary_range_settings.annual_package_min),
                                        max: parseInt(t.salary_range_settings.annual_package_max),
                                        step: parseInt(t.salary_range_settings.annual_package_step),
                                        values: [parseInt(t.salary_range_settings.annual_package_min_val), parseInt(t.salary_range_settings.annual_package_max_val)]
                                    }), e("#" + t.widgetId + "-salary-switcher .ajb-salary-amount").html("$" + salarySliderObj.slider("values", 0) + "K - $" + salarySliderObj.slider("values", 1) + "K"), e(this).find(".ajb-salary-annual a").addClass("selected");
                                    break;
                                case "hourly":
                                    salarySliderObj.slider("option", {
                                        min: parseInt(t.salary_range_settings.hourly_rate_min),
                                        max: parseInt(t.salary_range_settings.hourly_rate_max),
                                        step: parseInt(t.salary_range_settings.hourly_rate_step),
                                        values: [parseInt(t.salary_range_settings.hourly_rate_min_val), parseInt(t.salary_range_settings.hourly_rate_max_val)]
                                    }), e("#" + t.widgetId + "-salary-switcher .ajb-salary-amount").html("$" + salarySliderObj.slider("values", 0) + " - $" + salarySliderObj.slider("values", 1) + "/hr"), e(this).find(".ajb-salary-hourly a").addClass("selected")
                            }
                            e("#" + t.widgetId + "-salary-switcher .ajb-salary-type-selector .ajb-salary-hourly").click(function() {
                                t.salary_range_settings.currentSalaryType = "hourly", salarySliderObj.slider("option", {
                                    min: parseInt(t.salary_range_settings.hourly_rate_min),
                                    max: parseInt(t.salary_range_settings.hourly_rate_max),
                                    step: parseInt(t.salary_range_settings.hourly_rate_step),
                                    values: [parseInt(t.salary_range_settings.hourly_rate_min_val), parseInt(t.salary_range_settings.hourly_rate_max_val)]
                                }), e("#" + t.widgetId + "-salary-switcher .ajb-salary-amount").html("$" + salarySliderObj.slider("values", 0) + " - $" + salarySliderObj.slider("values", 1) + "/hr"), e("#" + t.widgetId + "-salary-type").val("HourlyRate"), e("#" + t.widgetId + "-salary-min").val(salarySliderObj.slider("values", 0)), e("#" + t.widgetId + "-salary-max").val(salarySliderObj.slider("values", 1)), e(".ajb-salary-type-selector a").toggleClass("selected")
                            }), e("#" + t.widgetId + "-salary-switcher .ajb-salary-type-selector .ajb-salary-annual").click(function() {
                                t.salary_range_settings.currentSalaryType = "annual", salarySliderObj.slider("option", {
                                    min: parseInt(t.salary_range_settings.annual_package_min),
                                    max: parseInt(t.salary_range_settings.annual_package_max),
                                    step: parseInt(t.salary_range_settings.annual_package_step),
                                    values: [parseInt(t.salary_range_settings.annual_package_min_val), parseInt(t.salary_range_settings.annual_package_max_val)]
                                }), e("#" + t.widgetId + "-salary-switcher .ajb-salary-amount").html("$" + salarySliderObj.slider("values", 0) + "K - $" + salarySliderObj.slider("values", 1) + "K"), e("#" + t.widgetId + "-salary-type").val("AnnualPackage"), e("#" + t.widgetId + "-salary-min").val(1e3 * salarySliderObj.slider("values", 0)), e("#" + t.widgetId + "-salary-max").val(1e3 * salarySliderObj.slider("values", 1)), e(".ajb-salary-type-selector a").toggleClass("selected")
                            }), e("#" + t.widgetId + "-salary-range a.ui-slider-handle").eq(0).addClass("ajb-salary-min-slider"), e("#" + t.widgetId + "-salary-range a.ui-slider-handle").eq(1).addClass("ajb-salary-max-slider")
                        }
                        e(this).find("form").submit(function() {
                            return e(document).trigger("adlogicJobSearch.searchWidget.submit", [a, t]), i.submit.apply(a), !1
                        }), e(this).find("form").keypress(function(a) {
                            if (13 == a.which) {
                                if (t.useNewLocation && a.target && a.target.id === t.widgetId + "-location_select_id") return;
                                e(this).submit()
                            }
                        }), e(this).find(".ajb-view-all-jobs-button,.ajb-search-for-jobs-button").attr("disabled", !0), e(document).ajaxStop(function() {
                            a.find(".ajb-view-all-jobs-button,.ajb-search-for-jobs-button").attr("disabled", !1).unbind("click"), a.children("form").unbind("submit"), a.children("form").submit(function() {
                                return e(document).trigger("adlogicJobSearch.searchWidget.submit", [a, t]), i.submit.apply(a), !1
                            }), a.find(".ajb-search-for-jobs-button").click(function() {
                                e(document).trigger("adlogicJobSearch.searchWidget.submit", [a, t]), i.submit.apply(a)
                            }), a.find(".ajb-view-all-jobs-button").click(function() {
                                if (a.find("form")[0].reset(), e("#" + t.widgetId + "-location_select_id").val(""), e("#" + t.widgetId + "-location_select_id").removeAttr("geoLocationJson"), e("#" + t.widgetId + "-salary-range").length > 0) switch (e("#" + t.widgetId + "-salary-type").val(""), e("#" + t.widgetId + "-salary-min").val(""), e("#" + t.widgetId + "-salary-max").val(""), t.salary_range_settings.currentSalaryType) {
                                    case "annual":
                                        salarySliderObj.slider("option", {
                                            min: parseInt(t.salary_range_settings.annual_package_min),
                                            max: parseInt(t.salary_range_settings.annual_package_max),
                                            step: parseInt(t.salary_range_settings.annual_package_step),
                                            values: [parseInt(t.salary_range_settings.annual_package_min), parseInt(t.salary_range_settings.annual_package_max)]
                                        }), e("#" + t.widgetId + "-salary-switcher .ajb-salary-amount").html("$" + salarySliderObj.slider("values", 0) + "K - $" + salarySliderObj.slider("values", 1) + "K");
                                        break;
                                    case "hourly":
                                        salarySliderObj.slider("option", {
                                            min: parseInt(t.salary_range_settings.hourly_rate_min),
                                            max: parseInt(t.salary_range_settings.hourly_rate_max),
                                            step: parseInt(t.salary_range_settings.hourly_rate_step),
                                            values: [parseInt(t.salary_range_settings.hourly_rate_min), parseInt(t.salary_range_settings.hourly_rate_max)]
                                        }), e("#" + t.widgetId + "-salary-switcher .ajb-salary-amount").html("$" + salarySliderObj.slider("values", 0) + " - $" + salarySliderObj.slider("values", 1) + "/hr")
                                }
                                e(document).trigger("adlogicJobSearch.searchWidget.submit", [a, t]), i.submit.apply(a)
                            }), e(document).trigger("adlogicJobSearch.searchWidget.loaded", [a, t])
                        })
                    },
                    buildDropdowns: function() {
                        void 0 === adlogicJobSearch.cache && (adlogicJobSearch.cache = {}), e("#" + t.widgetId + "-classification_id").length > 0 && (e("#" + t.widgetId + "-classification_id").prev("label").toggleClass("loading"), 1 == t.adCounts.classifications || 1 == t.hideEmpty.classifications ? getClassificationsUrl = adlogicJobSearch.ajaxurl + "?action=getIndustries&jobCount=true" : getClassificationsUrl = adlogicJobSearch.ajaxurl + "?action=getIndustries", 1 == t.topLevelOnly.classifications && (getClassificationsUrl += "&onlyFirstLevel=true"), void 0 === adlogicJobSearch.cache.classifications || void 0 === adlogicJobSearch.cache.classificationsUrl && (1 == t.adCounts.classifications || 1 == t.hideEmpty.classifications) || void 0 !== adlogicJobSearch.cache.classificationsUrl && getClassificationsUrl != adlogicJobSearch.cache.classificationsUrl ? e.ajax(getClassificationsUrl, {
                            beforeSend: function(t) {
                                e(window).bind("beforeunload", function() {
                                    t.abort()
                                })
                            },
                            success: function(s) {
                                adlogicJobSearch.cache.classificationsUrl = getClassificationsUrl, adlogicJobSearch.cache.classificationDataArray = new Array, adlogicJobSearch.cache.classifications = s.cla, e.isArray(s.cla) || (s.cla = new Array(s.cla)), e.each(s.cla, function(t) {
                                    classificationType = e(this)[0], "0" == classificationType.parent || void 0 === classificationType.parent ? (ad_count = void 0 !== classificationType.adCount && classificationType.adCount, adlogicJobSearch.cache.classificationDataArray.push({
                                        id: classificationType.id,
                                        label: classificationType.displayName,
                                        count: ad_count,
                                        children: []
                                    })) : e.each(adlogicJobSearch.cache.classificationDataArray, function(t, a) {
                                        ad_count = void 0 !== classificationType.adCount && classificationType.adCount, a.id == classificationType.parent ? a.children.push({
                                            id: classificationType.id,
                                            label: classificationType.displayName,
                                            count: ad_count,
                                            children: []
                                        }) : a.children.length > 0 && e.each(a.children, function(e, t) {
                                            t.id == classificationType.parent && t.children.push({
                                                id: classificationType.id,
                                                label: classificationType.displayName,
                                                count: ad_count,
                                                children: []
                                            })
                                        })
                                    })
                                }), dropdownOptions = [{
                                    select: e("#" + t.widgetId + "-classification_id"),
                                    data: adlogicJobSearch.cache.classificationDataArray,
                                    type: "classification"
                                }], i.renderDropdowns.apply(a, dropdownOptions)
                            },
                            statusCode: {
                                500: function() {
                                    void 0 === this.retries && (this.retries = 0), this.retries++, o.classifications = this, this.retries <= 5 && setTimeout(function() {
                                        e.ajax(o.classifications)
                                    }, 1e3 * this.retries)
                                },
                                503: function() {
                                    void 0 === this.retries && (this.retries = 0), this.retries++, o.classifications = this, this.retries <= 5 && setTimeout(function() {
                                        e.ajax(o.classifications)
                                    }, 1e3 * this.retries)
                                }
                            }
                        }) : (dropdownOptions = [{
                            select: e("#" + t.widgetId + "-classification_id"),
                            data: adlogicJobSearch.cache.classificationDataArray,
                            type: "classification"
                        }], i.renderDropdowns.apply(a, dropdownOptions))), 1 != t.useNewLocation && 1 == t.useNewLocationAPI ? e("#" + t.widgetId + "-location_id").length > 0 && (e("#" + t.widgetId + "-location_id").prev("label").toggleClass("loading"), 1 == t.adCounts.locations || 1 == t.hideEmpty.locations ? getLocationsUrl = adlogicJobSearch.ajaxurl + "?action=getLocations&jobCount=true" : getLocationsUrl = adlogicJobSearch.ajaxurl + "?action=getLocations", 1 == t.topLevelOnly.locations && (getLocationsUrl += "&onlyFirstLevel=true"), void 0 === adlogicJobSearch.cache.locations || void 0 === adlogicJobSearch.cache.locationsUrl && (1 == t.adCounts.locations || 1 == t.hideEmpty.locations) || void 0 !== adlogicJobSearch.cache.locationsUrl && getLocationsUrl != adlogicJobSearch.cache.locationsUrl ? e.ajax(getLocationsUrl, {
                            success: function(s) {
                                adlogicJobSearch.cache.locationsUrl = getLocationsUrl, adlogicJobSearch.cache.locationDataArray = new Array, adlogicJobSearch.cache.locations = s.countries, e.isArray(s.countries) || (s.countries = new Array(s.countries));
                                e.each(s.countries, function(t) {
                                    locationType = e(this)[0], country = locationType.country, adlogicJobSearch.cache.locationDataArray.push({
                                        id: country.id,
                                        label: country.name,
                                        count: !1,
                                        children: country.state
                                    })
                                }), dropdownOptions = [{
                                    select: e("#" + t.widgetId + "-location_id"),
                                    data: adlogicJobSearch.cache.locationDataArray,
                                    type: "location"
                                }], i.renderDropdowns.apply(a, dropdownOptions)
                            },
                            statusCode: {
                                500: function() {
                                    void 0 === this.retries && (this.retries = 0), this.retries++, o.locations = this, this.retries <= 5 && setTimeout(function() {
                                        e.ajax(o.locations)
                                    }, 1e3 * this.retries)
                                },
                                503: function() {
                                    void 0 === this.retries && (this.retries = 0), this.retries++, o.locations = this, this.retries <= 5 && setTimeout(function() {
                                        e.ajax(o.locations)
                                    }, 1e3 * this.retries)
                                }
                            }
                        }) : (dropdownOptions = [{
                            select: e("#" + t.widgetId + "-location_id"),
                            data: adlogicJobSearch.cache.locationDataArray,
                            type: "location"
                        }], i.renderDropdowns.apply(a, dropdownOptions))) : 1 != t.useNewLocation && 1 != t.useNewLocationAPI && e("#" + t.widgetId + "-location_id").length > 0 && (e("#" + t.widgetId + "-location_id").prev("label").toggleClass("loading"), 1 == t.adCounts.locations || 1 == t.hideEmpty.locations ? getLocationsUrl = adlogicJobSearch.ajaxurl + "?action=getLocations&jobCount=true" : getLocationsUrl = adlogicJobSearch.ajaxurl + "?action=getLocations", 1 == t.topLevelOnly.locations && (getLocationsUrl += "&onlyFirstLevel=true"), void 0 === adlogicJobSearch.cache.locations || void 0 === adlogicJobSearch.cache.locationsUrl && (1 == t.adCounts.locations || 1 == t.hideEmpty.locations) || void 0 !== adlogicJobSearch.cache.locationsUrl && getLocationsUrl != adlogicJobSearch.cache.locationsUrl ? e.ajax(getLocationsUrl, {
                            success: function(s) {
                                adlogicJobSearch.cache.locationsUrl = getLocationsUrl, adlogicJobSearch.cache.locationDataArray = new Array, adlogicJobSearch.cache.locations = s.loc, e.isArray(s.loc) || (s.loc = new Array(s.loc));
                                e.each(s.loc, function(t) {
                                    locationType = e(this)[0], "0" == locationType.parent || void 0 === locationType.parent ? (ad_count = void 0 !== locationType.adCount && locationType.adCount, adlogicJobSearch.cache.locationDataArray.push({
                                        id: locationType.id,
                                        label: locationType.displayName,
                                        count: ad_count,
                                        children: []
                                    })) : e.each(adlogicJobSearch.cache.locationDataArray, function(t, a) {
                                        ad_count = void 0 !== locationType.adCount && locationType.adCount, a.id == locationType.parent ? a.children.push({
                                            id: locationType.id,
                                            label: locationType.displayName,
                                            count: ad_count,
                                            children: []
                                        }) : a.children.length > 0 && e.each(a.children, function(e, t) {
                                            t.id == locationType.parent && t.children.push({
                                                id: locationType.id,
                                                label: locationType.displayName,
                                                count: ad_count,
                                                children: []
                                            })
                                        })
                                    })
                                }), dropdownOptions = [{
                                    select: e("#" + t.widgetId + "-location_id"),
                                    data: adlogicJobSearch.cache.locationDataArray,
                                    type: "location"
                                }], i.renderDropdowns.apply(a, dropdownOptions)
                            },
                            statusCode: {
                                500: function() {
                                    void 0 === this.retries && (this.retries = 0), this.retries++, o.locations = this, this.retries <= 5 && setTimeout(function() {
                                        e.ajax(o.locations)
                                    }, 1e3 * this.retries)
                                },
                                503: function() {
                                    void 0 === this.retries && (this.retries = 0), this.retries++, o.locations = this, this.retries <= 5 && setTimeout(function() {
                                        e.ajax(o.locations)
                                    }, 1e3 * this.retries)
                                }
                            }
                        }) : (dropdownOptions = [{
                            select: e("#" + t.widgetId + "-location_id"),
                            data: adlogicJobSearch.cache.locationDataArray,
                            type: "location"
                        }], i.renderDropdowns.apply(a, dropdownOptions))), e("#" + t.widgetId + "-worktype_id").length > 0 && (e("#" + t.widgetId + "-worktype_id").prev("label").toggleClass("loading"), 1 == t.adCounts.worktypes || 1 == t.hideEmpty.worktypes ? getWorktypesUrl = adlogicJobSearch.ajaxurl + "?action=getWorktypes&jobCount=true" : getWorktypesUrl = adlogicJobSearch.ajaxurl + "?action=getWorktypes", 1 == t.topLevelOnly.worktypes && (getWorktypesUrl += "&onlyFirstLevel=true"), void 0 === adlogicJobSearch.cache.worktypes || void 0 === adlogicJobSearch.cache.worktypesUrl && (1 == t.adCounts.worktypes || 1 == t.hideEmpty.worktypes) || void 0 !== adlogicJobSearch.cache.worktypesUrl && getWorktypesUrl != adlogicJobSearch.cache.worktypesUrl ? (adlogicJobSearch.cache.worktypesUrl = getWorktypesUrl, adlogicJobSearch.cache.worktypeDataArray = new Array, e.ajax(getWorktypesUrl, {
                            beforeSend: function(t) {
                                e(window).bind("beforeunload", function() {
                                    t.abort()
                                })
                            },
                            success: function(s) {
                                adlogicJobSearch.cache.worktypesUrl = getWorktypesUrl, adlogicJobSearch.cache.worktypeDataArray = new Array, adlogicJobSearch.cache.worktypes = s.wor, e.isArray(s.wor) || (s.wor = new Array(s.wor)), e.each(s.wor, function(t) {
                                    worktypeType = e(this)[0], "0" == worktypeType.parent ? (ad_count = void 0 !== worktypeType.adCount && worktypeType.adCount, adlogicJobSearch.cache.worktypeDataArray.push({
                                        id: worktypeType.id,
                                        label: worktypeType.displayName,
                                        count: ad_count,
                                        children: []
                                    })) : e.each(adlogicJobSearch.cache.worktypeDataArray, function(e, t) {
                                        ad_count = void 0 !== worktypeType.adCount && worktypeType.adCount, t.id == worktypeType.parent && adlogicJobSearch.cache.worktypeDataArray.push({
                                            id: worktypeType.id,
                                            label: worktypeType.displayName,
                                            count: ad_count
                                        })
                                    })
                                }), dropdownOptions = [{
                                    select: e("#" + t.widgetId + "-worktype_id"),
                                    data: adlogicJobSearch.cache.worktypeDataArray,
                                    type: "worktype"
                                }], i.renderDropdowns.apply(a, dropdownOptions)
                            },
                            statusCode: {
                                500: function() {
                                    void 0 === this.retries && (this.retries = 0), this.retries++, o.worktypes = this, this.retries <= 5 && setTimeout(function() {
                                        e.ajax(o.worktypes)
                                    }, 1e3 * this.retries)
                                },
                                503: function() {
                                    void 0 === this.retries && (this.retries = 0), this.retries++, o.worktypes = this, this.retries <= 5 && setTimeout(function() {
                                        e.ajax(o.worktypes)
                                    }, 1e3 * this.retries)
                                }
                            }
                        })) : (dropdownOptions = [{
                            select: e("#" + t.widgetId + "-worktype_id"),
                            data: adlogicJobSearch.cache.worktypeDataArray,
                            type: "worktype"
                        }], i.renderDropdowns.apply(a, dropdownOptions))), e("#" + t.widgetId + "-costcenter_id").length > 0 && (e("#" + t.widgetId + "-costcenter_id").prev("label").toggleClass("loading"), 1 == t.adCounts.costcenters || 1 == t.hideEmpty.costcenters ? getCostcentersUrl = adlogicJobSearch.ajaxurl + "?action=getCostCenters&jobCount=true" : getCostcentersUrl = adlogicJobSearch.ajaxurl + "?action=getCostCenters", 1 == t.topLevelOnly.worktypes && (getWorktypesUrl += "&onlyFirstLevel=true"), void 0 === adlogicJobSearch.cache.costcenters || void 0 === adlogicJobSearch.cache.costcentersUrl && (1 == t.adCounts.costcenters || 1 == t.hideEmpty.costcenters) || void 0 !== adlogicJobSearch.cache.costcentersUrl && getCostcentersUrl != adlogicJobSearch.cache.costcentersUrl ? (adlogicJobSearch.cache.costcentersUrl = getCostcentersUrl, adlogicJobSearch.cache.costcenterDataArray = new Array, e.ajax(getCostcentersUrl, {
                            success: function(s) {
                                adlogicJobSearch.cache.costcentersUrl = getCostcentersUrl, adlogicJobSearch.cache.costcenterDataArray = new Array, adlogicJobSearch.cache.costcenters = s.costcenter, e.isArray(s.costcenter) || (s.costcenter = new Array(s.costcenter)), e.each(s.costcenter, function(t) {
                                    costcenterType = e(this)[0], ad_count = void 0 !== costcenterType.adCount && costcenterType.adCount, adlogicJobSearch.cache.costcenterDataArray.push({
                                        id: costcenterType.id,
                                        label: costcenterType.displayName,
                                        count: ad_count,
                                        children: []
                                    })
                                }), dropdownOptions = [{
                                    select: e("#" + t.widgetId + "-costcenter_id"),
                                    data: adlogicJobSearch.cache.costcenterDataArray,
                                    type: "costcenter"
                                }], i.renderDropdowns.apply(a, dropdownOptions)
                            },
                            statusCode: {
                                500: function() {
                                    void 0 === this.retries && (this.retries = 0), this.retries++, o.costcenters = this, this.retries <= 5 && setTimeout(function() {
                                        e.ajax(o.costcenters)
                                    }, 1e3 * this.retries)
                                },
                                503: function() {
                                    void 0 === this.retries && (this.retries = 0), this.retries++, o.costcenters = this, this.retries <= 5 && setTimeout(function() {
                                        e.ajax(o.costcenters)
                                    }, 1e3 * this.retries)
                                }
                            }
                        })) : (dropdownOptions = [{
                            select: e("#" + t.widgetId + "-costcenter_id"),
                            data: adlogicJobSearch.cache.costcenterDataArray,
                            type: "costcenter"
                        }], i.renderDropdowns.apply(a, dropdownOptions)))
                    },
                    renderDropdowns: function(s) {
                        switch (s.type) {
                            case "classification":
                                selectOptions = {
                                    dropdownType: t.dropdownType.classifications,
                                    adCounts: t.adCounts.classifications,
                                    hideEmpty: t.hideEmpty.classifications,
                                    rawcache: adlogicJobSearch.cache.classifications,
                                    doubleSelectId: "#" + t.widgetId + "-classification_select_id",
                                    subSelectId: "#" + t.widgetId + "-sub_classification_select_id",
                                    translation: t.translations.classifications,
                                    sub_translation: t.translations.sub_classifications,
                                    selectedValue: "undefined" != typeof indIdDef ? indIdDef : null,
                                    showThirdLevel: t.showThirdLevel.classifications
                                };
                                break;
                            case "location":
                                selectOptions = {
                                    dropdownType: t.dropdownType.locations,
                                    adCounts: t.adCounts.locations,
                                    hideEmpty: t.hideEmpty.locations,
                                    rawcache: adlogicJobSearch.cache.locations,
                                    doubleSelectId: "#" + t.widgetId + "-location_select_id",
                                    subSelectId: "#" + t.widgetId + "-sub_location_select_id",
                                    subSubSelectId: "#" + t.widgetId + "-sub_sub_location_select_id",
                                    translation: t.translations.locations,
                                    sub_translation: t.translations.sub_locations,
                                    sub_sub_translation: t.translations.sub_sub_locations,
                                    selectedValue: "undefined" != typeof locIdDef ? locIdDef : null,
                                    showThirdLevel: t.showThirdLevel.locations
                                };
                                break;
                            case "worktype":
                                selectOptions = {
                                    dropdownType: "flat",
                                    adCounts: t.adCounts.worktypes,
                                    hideEmpty: t.hideEmpty.worktypes,
                                    rawcache: adlogicJobSearch.cache.worktypes,
                                    translation: t.translations.worktype,
                                    doubleSelectId: null,
                                    subSelectId: null,
                                    sub_translation: "",
                                    selectedValue: "undefined" != typeof wtIdDef ? wtIdDef : null,
                                    showThirdLevel: t.showThirdLevel.worktypes
                                };
                                break;
                            case "costcenter":
                                selectOptions = {
                                    dropdownType: "flat",
                                    adCounts: t.adCounts.costcenters,
                                    hideEmpty: t.hideEmpty.costcenters,
                                    rawcache: adlogicJobSearch.cache.costcenters,
                                    translation: t.translations.costcenter,
                                    doubleSelectId: null,
                                    subSelectId: null,
                                    sub_translation: "",
                                    selectedValue: "undefined" != typeof ccIdDef ? ccIdDef : null,
                                    showThirdLevel: t.showThirdLevel.costcenters
                                }
                        }
                        switch (selectOptions.dropdownType) {
                            case "single":
                            case "multiple":
                                s.select.append('<option value="">All ' + selectOptions.translation + "</option>"), e.each(s.data, function(a, o) {
                                    if (1 == selectOptions.hideEmpty && 0 == o.count) return !0;
                                    1 == selectOptions.adCounts ? optionEl = e('<option value="' + o.id + '" class="ajb-parent-opt"><strong>' + o.label + " (" + o.count + ")</strong></option>") : optionEl = e('<option value="' + o.id + '" class="ajb-parent-opt"><strong>' + o.label + "</strong></option>"), s.select.append(optionEl), e.each(o.children, function(a, o) {
                                        if (1 == selectOptions.hideEmpty && 0 == o.count) return !0;
                                        1 == selectOptions.adCounts ? o.children.length > 0 ? s.select.append('<option value="' + o.id + '" class="ajb-sub-parent-opt">' + (t.chosenEnabled ? "" : "&nbsp;&nbsp;&nbsp;") + o.label + " (" + o.count + ")</option>") : s.select.append('<option value="' + o.id + '" class="ajb-child-opt">' + (t.chosenEnabled ? "" : "&nbsp;&nbsp;&nbsp;") + o.label + " (" + o.count + ")</option>") : o.children.length > 0 ? s.select.append('<option value="' + o.id + '" class="ajb-sub-parent-opt">' + (t.chosenEnabled ? "" : "&nbsp;&nbsp;&nbsp;") + o.label + "</option>") : s.select.append('<option value="' + o.id + '" class="ajb-child-opt">' + (t.chosenEnabled ? "" : "&nbsp;&nbsp;&nbsp;") + o.label + "</option>"), o.children.length > 0 && 1 == selectOptions.showThirdLevel && e.each(o.children, function(e, a) {
                                            if (1 == selectOptions.hideEmpty && 0 == a.count) return !0;
                                            1 == selectOptions.adCounts ? s.select.append('<option value="' + a.id + '" class="ajb-sub-parent-child-opt">' + (t.chosenEnabled ? "" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;") + a.label + " (" + a.count + ")</option>") : s.select.append('<option value="' + a.id + '" class="ajb-sub-parent-child-opt">' + (t.chosenEnabled ? "" : "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;") + a.label + "</option>")
                                        })
                                    })
                                }), void 0 !== selectOptions.selectedValue && null != selectOptions.selectedValue && s.select.val(selectOptions.selectedValue.split(","));
                                break;
                            case "double":
                                0 == t.useNewLocationAPI ? (e(selectOptions.doubleSelectId).append('<option value="">All ' + selectOptions.translation + "</option>"), e(selectOptions.subSelectId).append('<option value="">All ' + selectOptions.sub_translation + "</option>"), e.each(s.data, function(t, a) {
                                    if (1 == selectOptions.hideEmpty && 0 == a.count) return !0;
                                    1 == selectOptions.adCounts ? e(selectOptions.doubleSelectId).append('<option value="' + a.id + '">' + a.label + " (" + a.count + ")</option>") : e(selectOptions.doubleSelectId).append('<option value="' + a.id + '">' + a.label + "</option>")
                                }), e(selectOptions.doubleSelectId).unbind("change"), e(selectOptions.subSelectId).unbind("change"), e(selectOptions.doubleSelectId).change(selectOptions, function(o) {
                                    "" != e(o.target).val() ? (e(o.data.subSelectId).empty(), s.select.val(e(o.target).val()), e.each(s.data, function(t, a) {
                                        if (a.id == e(o.target).val()) {
                                            if (1 == o.data.hideEmpty && 0 == a.count) return !0;
                                            1 == o.data.adCounts ? e(o.data.subSelectId).append('<option value="' + e(o.target).val() + '">All ' + a.label + " Jobs (" + a.count + ")</option>") : e(o.data.subSelectId).append('<option value="' + e(o.target).val() + '">All ' + a.label + " Jobs</option>"), e.each(a.children, function(t, a) {
                                                if (1 == o.data.hideEmpty && 0 == a.count) return !0;
                                                1 == o.data.adCounts ? e(o.data.subSelectId).append('<option value="' + a.id + '">' + a.label + " (" + a.count + ")</option>") : e(o.data.subSelectId).append('<option value="' + a.id + '">' + a.label + "</option>")
                                            })
                                        }
                                    })) : (s.select.val(""), e(o.data.subSelectId).empty(), e(o.data.subSelectId).append('<option value="">All ' + o.data.sub_translation + "</option>")), e(document).trigger("adlogicJobSearch.searchWidget.selectUpdate", [a, t])
                                }), e(selectOptions.subSelectId).change(function(o) {
                                    s.select.val(e(o.target).val()), e(document).trigger("adlogicJobSearch.searchWidget.selectUpdate", [a, t])
                                }), void 0 !== selectOptions.selectedValue && null != selectOptions.selectedValue && (selectOptions.selectedValue = selectOptions.selectedValue.split(",")[0], s.select.val(selectOptions.selectedValue), e.each(selectOptions.rawcache, function(t, a) {
                                    selectOptions.selectedValue == a.id && ("0" == a.parent ? (e(selectOptions.doubleSelectId).val(a.id), e(selectOptions.subSelectId).empty(), e.each(s.data, function(t, s) {
                                        s.id == a.id && (1 == selectOptions.adCounts ? e(selectOptions.subSelectId).append('<option value="' + a.id + '">All ' + s.label + " Jobs (" + s.count + ")</option>") : e(selectOptions.subSelectId).append('<option value="' + a.id + '">All ' + s.label + " Jobs</option>"), e.each(s.children, function(t, a) {
                                            if (1 == selectOptions.hideEmpty && 0 == a.count) return !0;
                                            1 == selectOptions.adCounts ? e(selectOptions.subSelectId).append('<option value="' + a.id + '">' + a.label + " (" + a.count + ")</option>") : e(selectOptions.subSelectId).append('<option value="' + a.id + '">' + a.label + "</option>")
                                        }))
                                    })) : (e(selectOptions.subSelectId).empty(), e.each(s.data, function(t, s) {
                                        s.id == a.parent && (1 == selectOptions.adCounts ? e(selectOptions.subSelectId).append('<option value="' + a.id + '">All ' + s.label + " Jobs (" + s.count + ")</option>") : e(selectOptions.subSelectId).append('<option value="' + a.id + '">All ' + s.label + " Jobs</option>"), e.each(s.children, function(t, a) {
                                            if (1 == selectOptions.hideEmpty && 0 == a.count) return !0;
                                            1 == selectOptions.adCounts ? e(selectOptions.subSelectId).append('<option value="' + a.id + '">' + a.label + " (" + a.count + ")</option>") : e(selectOptions.subSelectId).append('<option value="' + a.id + '">' + a.label + "</option>")
                                        }))
                                    }), e(selectOptions.doubleSelectId).val(a.parent), e(selectOptions.subSelectId).val(a.id)))
                                }))) : (e(selectOptions.doubleSelectId).append('<option value="">All ' + selectOptions.translation + "</option>"), e(selectOptions.subSelectId).append('<option value="">All ' + selectOptions.sub_translation + "</option>"), e(selectOptions.subSubSelectId).append('<option value="">All ' + selectOptions.sub_sub_translation + "</option>"), e.each(s.data, function(t, a) {
                                    if (1 == selectOptions.hideEmpty && 0 == a.count) return !0;
                                    1 == selectOptions.adCounts ? e(selectOptions.doubleSelectId).append('<option value="' + a.id + '">' + a.label + " (" + a.count + ")</option>") : e(selectOptions.doubleSelectId).append('<option value="' + a.id + '">' + a.label + "</option>")
                                }), e(selectOptions.doubleSelectId).unbind("change"), e(selectOptions.subSelectId).unbind("change"), e(selectOptions.subSubSelectId).unbind("change"), e(selectOptions.doubleSelectId).change(selectOptions, function(o) {
                                    var i = document.getElementById(t.widgetId + "-location_select_id");
                                    i.selectedIndex > 0 ? (suburbStr = "", states = s.data[i.selectedIndex - 1], e.each(states.children, function(t, a) {
                                        e.each(a.suburbs, function(e, t) {
                                            suburbStr = suburbStr.concat(t.id, ",")
                                        })
                                    }), suburbStr = suburbStr.substring(0, suburbStr.length - 1), s.select.val(""), s.select.val(suburbStr), "" != e(o.target).val() && (e(o.data.subSelectId).empty(), e.each(s.data, function(t, a) {
                                        if (a.id == e(o.target).val()) {
                                            if (1 == o.data.hideEmpty && 0 == a.count) return !0;
                                            1 == o.data.adCounts ? e(o.data.subSelectId).append('<option value="">All ' + a.label + " Jobs (" + a.count + ")</option>") : e(o.data.subSelectId).append('<option value="' + suburbStr + '">All ' + a.label + " Jobs</option>"), e.each(a.children, function(t, a) {
                                                if (1 == o.data.hideEmpty && 0 == a.count) return !0;
                                                1 == o.data.adCounts ? e(o.data.subSelectId).append('<option value="' + a.id + '">' + a.label + " (" + a.count + ")</option>") : e(o.data.subSelectId).append('<option value="' + a.id + '">' + a.name + "</option>")
                                            }), e(o.data.subSubSelectId).empty(), e(o.data.subSubSelectId).append('<option value="">All ' + o.data.sub_sub_translation + "</option>")
                                        }
                                    }))) : (suburbStr = "", suburbSubStr = "", s.select.val(""), e(o.data.subSelectId).empty(), e(o.data.subSelectId).append('<option value="">All ' + o.data.sub_translation + "</option>"), e(o.data.subSubSelectId).empty(), e(o.data.subSubSelectId).append('<option value="">All ' + o.data.sub_sub_translation + "</option>")), e(document).trigger("adlogicJobSearch.searchWidget.selectUpdate", [a, t])
                                }), e(selectOptions.subSelectId).change(function(o) {
                                    selectOptions = {
                                        dropdownType: t.dropdownType.locations,
                                        adCounts: t.adCounts.locations,
                                        hideEmpty: t.hideEmpty.locations,
                                        rawcache: adlogicJobSearch.cache.locations,
                                        doubleSelectId: "#" + t.widgetId + "-location_select_id",
                                        subSelectId: "#" + t.widgetId + "-sub_location_select_id",
                                        subSubSelectId: "#" + t.widgetId + "-sub_sub_location_select_id",
                                        translation: t.translations.locations,
                                        sub_translation: t.translations.sub_locations,
                                        sub_sub_translation: t.translations.sub_sub_locations,
                                        selectedValue: "undefined" != typeof locIdDef ? locIdDef : null,
                                        showThirdLevel: t.showThirdLevel.locations
                                    }, o.data = selectOptions;
                                    var i = document.getElementById(t.widgetId + "-location_select_id"),
                                        n = document.getElementById(t.widgetId + "-sub_location_select_id");
                                    n.selectedIndex > 0 ? (suburbSubStr = "", states = s.data[i.selectedIndex - 1], suburbs = states.children[n.selectedIndex - 1], e.each(suburbs.suburbs, function(e, t) {
                                        suburbSubStr = suburbSubStr.concat(t.id, ",")
                                    }), suburbSubStr = suburbSubStr.substring(0, suburbSubStr.length - 1), s.select.val(suburbSubStr)) : (suburbSubStr = "", s.select.val(suburbStr), e(o.data.subSubSelectId).empty()), e(o.target).val() != suburbStr ? (e(o.data.subSubSelectId).empty(), optionObj = states.children[n.selectedIndex - 1], "undefined" != typeof optionObj ? (1 == o.data.adCounts ? e(o.data.subSubSelectId).append('<option value=""> All ' + optionObj.label + " Jobs (" + optionObj.count + ")</option>") : e(o.data.subSubSelectId).append('<option value="' + suburbSubStr + '">All ' + optionObj.name + " Jobs</option>"), e.each(optionObj.suburbs, function(t, a) {
                                        if (1 == o.data.hideEmpty && 0 == a.count) return !0;
                                        1 == o.data.adCounts ? e(o.data.subSubSelectId).append('<option value="' + a.id + '">' + a.label + " (" + a.count + ")</option>") : e(o.data.subSubSelectId).append('<option value="' + a.id + '">' + a.name + "</option>")
                                    })) : (e(o.data.subSubSelectId).append('<option value="">All ' + selectOptions.sub_sub_translation + "</option>"), s.select.val(suburbStr))) : (s.select.val(suburbStr), e(o.data.subSubSelectId).empty(), e(o.data.subSubSelectId).append('<option value="">All ' + o.data.sub_sub_translation + "</option>")), e(document).trigger("adlogicJobSearch.searchWidget.selectUpdate", [a, t])
                                }), e(selectOptions.subSubSelectId).change(function(t) {
                                    s.select.val(e(t.target).val())
                                }), void 0 !== selectOptions.selectedValue && null != selectOptions.selectedValue && (selectOptions.selectedValue = selectOptions.selectedValue.split(",")[0], s.select.val(selectOptions.selectedValue), e.each(selectOptions.rawcache, function(t, a) {
                                    selectOptions.selectedValue == a.id && ("0" == a.parent ? (e(selectOptions.doubleSelectId).val(a.id), e(selectOptions.subSelectId).empty(), e.each(s.data, function(t, s) {
                                        s.id == a.id && (1 == selectOptions.adCounts ? e(selectOptions.subSelectId).append('<option value="' + a.id + '">All ' + s.label + " Jobs (" + s.count + ")</option>") : e(selectOptions.subSelectId).append('<option value="' + a.id + '">All ' + s.label + " Jobs</option>"), e.each(s.children, function(t, a) {
                                            if (1 == selectOptions.hideEmpty && 0 == a.count) return !0;
                                            1 == selectOptions.adCounts ? e(selectOptions.subSelectId).append('<option value="' + a.id + '">' + a.label + " (" + a.count + ")</option>") : e(selectOptions.subSelectId).append('<option value="' + a.id + '">' + a.label + "</option>")
                                        }))
                                    })) : (e(selectOptions.subSelectId).empty(), e.each(s.data, function(t, s) {
                                        s.id == a.parent && (1 == selectOptions.adCounts ? e(selectOptions.subSelectId).append('<option value="' + a.id + '">All ' + s.label + " Jobs (" + s.count + ")</option>") : e(selectOptions.subSelectId).append('<option value="' + a.id + '">All ' + s.label + " Jobs</option>"), e.each(s.children, function(t, a) {
                                            if (1 == selectOptions.hideEmpty && 0 == a.count) return !0;
                                            1 == selectOptions.adCounts ? e(selectOptions.subSelectId).append('<option value="' + a.id + '">' + a.label + " (" + a.count + ")</option>") : e(selectOptions.subSelectId).append('<option value="' + a.id + '">' + a.label + "</option>")
                                        }))
                                    }), e(selectOptions.doubleSelectId).val(a.parent), e(selectOptions.subSelectId).val(a.id)))
                                })));
                                break;
                            case "flat":
                                s.select.append('<option value="">All ' + selectOptions.translation + "</option>"), e.each(s.data, function(e, t) {
                                    if (1 == selectOptions.hideEmpty && 0 == t.count) return !0;
                                    1 == selectOptions.adCounts ? s.select.append('<option value="' + t.id + '">' + t.label + " (" + t.count + ")</option>") : s.select.append('<option value="' + t.id + '">' + t.label + "</option>")
                                }), void 0 !== selectOptions.selectedValue && null != selectOptions.selectedValue && s.select.val(selectOptions.selectedValue.split(","))
                        }
                        s.select.prev("label").toggleClass("loading")
                    },
                    submit: function() {
                        if ("double" == t.dropdownType.classifications ? selectedIndLabel = e("#" + t.widgetId + "-sub_classification_select_id option:selected").text() : "multiple" == t.dropdownType.classifications ? (selectedIndLabel = "", e("#" + t.widgetId + "-classification_id option:selected").each(function(t, a) {
                                selectedIndLabel += trim(e(a).text()) + "-"
                            }), selectedIndLabel = selectedIndLabel.substring(0, selectedIndLabel.length - 1)) : selectedIndLabel = e("#" + t.widgetId + "-classification_id option:selected").text(), void 0 !== e("#" + t.widgetId + "-classification_id").val() && null != e("#" + t.widgetId + "-classification_id").val() && "" != e("#" + t.widgetId + "-classification_id").val() ? e.isArray(e("#" + t.widgetId + "-classification_id")) ? selectedIndValue = e("#" + t.widgetId + "-classification_id").val().join() : selectedIndValue = e("#" + t.widgetId + "-classification_id").val() : selectedIndValue = "", selectedLocObj = {}, t.useNewLocation ? (selectedLocLabel = e("#" + t.widgetId + "-location_select_id").val(), selectedLocValue = "", MRP.StringUtil.hasData(e("#" + t.widgetId + "-location_select_id").attr("geoLocationJson")) && (selectedLocObj = e("#" + t.widgetId + "-location_select_id").attr("geoLocationJson"))) : ("double" == t.dropdownType.locations ? selectedLocLabel = e("#" + t.widgetId + "-sub_location_select_id option:selected").text() : "multiple" == t.dropdownType.locations ? (selectedLocLabel = "", e("#" + t.widgetId + "-location_id option:selected").each(function(t, a) {
                                selectedLocLabel += trim(e(a).text()) + "-"
                            }), selectedLocLabel = selectedLocLabel.substring(0, selectedLocLabel.length - 1)) : selectedLocLabel = e("#" + t.widgetId + "-location_id option:selected").text(), void 0 !== e("#" + t.widgetId + "-location_id").val() && null != e("#" + t.widgetId + "-location_id").val() && "" != e("#" + t.widgetId + "-location_id").val() ? e.isArray(e("#" + t.widgetId + "-location_id").val()) ? selectedLocValue = e("#" + t.widgetId + "-location_id").val().join() : selectedLocValue = e("#" + t.widgetId + "-location_id").val() : selectedLocValue = ""), "multiple" == t.dropdownType.worktypes ? (selectedWtLabel = "", e("#" + t.widgetId + "-worktype_id option:selected").each(function(t, a) {
                                selectedWtLabel += trim(e(a).text()) + "-"
                            }), selectedWtLabel = selectedWtLabel.substring(0, selectedWtLabel.length - 1)) : selectedWtLabel = e("#" + t.widgetId + "-worktype_id option:selected").text(), void 0 !== e("#" + t.widgetId + "-worktype_id").val() && null != e("#" + t.widgetId + "-worktype_id").val() && "" != e("#" + t.widgetId + "-worktype_id").val() ? e.isArray(e("#" + t.widgetId + "-worktype_id").val()) ? selectedWtValue = e("#" + t.widgetId + "-worktype_id").val().join() : selectedWtValue = e("#" + t.widgetId + "-worktype_id").val() : selectedWtValue = "", selectedSalaryType = e("#" + t.widgetId + "-salary-type").val(), selectedSalaryMin = e("#" + t.widgetId + "-salary-min").val(), selectedSalaryMax = e("#" + t.widgetId + "-salary-max").val(), "undefined" != e("#" + t.widgetId + "-listing_type").val() && (selectedListingType = e("#" + t.widgetId + "-listing_type").val()), "undefined" != e("#" + t.widgetId + "-costcenter_id").val() && (selectedCostCenter = e("#" + t.widgetId + "-costcenter_id").val()), "undefined" != e("#" + t.widgetId + "-orgunit_id").val() && (selectedOrgUnit = e("#" + t.widgetId + "-orgunit_id").val()), void 0 !== adlogicJobSearch.registered_search_results && adlogicJobSearch.registered_search_results.length > 0) adlogicJobSearch.discardHashChange = !0, e.each(adlogicJobSearch.registered_search_results, function(a, s) {
                            currentOptions = s.adlogicJobSearch("options"), searchOptions = {
                                location_id: selectedLocValue,
                                industry_id: selectedIndValue,
                                work_type_id: selectedWtValue,
                                salary_type: selectedSalaryType,
                                salary_min: selectedSalaryMin,
                                salary_max: selectedSalaryMax,
                                keywords: e("#" + t.widgetId + "-keywords").val(),
                                currentPage: 0,
                                from: 1,
                                to: currentOptions.items_per_page,
                                location_name: selectedLocLabel,
                                industry_name: selectedIndLabel,
                                worktype_name: selectedWtLabel,
                                geoLocationJson: selectedLocObj
                            }, "undefined" != typeof selectedListingType && (searchOptions.internalExternal = selectedListingType), "undefined" != typeof selectedCostCenter && (searchOptions.cost_center_id = selectedCostCenter), "undefined" != typeof selectedOrgUnit && (searchOptions.org_unit_id = selectedOrgUnit), s.adlogicJobSearch("options", {
                                searchParams: searchOptions
                            }), s.adlogicJobSearch("update", {
                                hash_update: !0
                            })
                        });
                        else {
                            if (searchUrl = t.searchUrl, searchUrl += selectedIndValue ? "Industry/" + uriSafe(selectedIndLabel) + "/" + selectedIndValue + "/" : "", searchUrl += selectedLocValue ? "Location/" + uriSafe(selectedLocLabel) + "/" + selectedLocValue + "/" : "", searchUrl += selectedWtValue ? "WorkType/" + uriSafe(selectedWtLabel) + "/" + selectedWtValue + "/" : "", searchUrl += selectedSalaryType ? "SalaryType/" + selectedSalaryType + "/" : "", searchUrl += selectedSalaryMin ? "SalaryMin/" + selectedSalaryMin + "/" : "", searchUrl += selectedSalaryMax ? "SalaryMax/" + selectedSalaryMax + "/" : "", "undefined" != typeof selectedCostCenter && (searchUrl += "CostCenter/" + selectedCostCenter + "/"), "undefined" != typeof selectedOrgUnit && (searchUrl += "OrgUnit/" + selectedOrgUnit + "/"), "undefined" != typeof selectedListingType && (searchUrl += "ListingType/" + selectedListingType + "/"), selectedLocObj = {}, t.useNewLocation && (selectedLocLabel = e("#" + t.widgetId + "-location_select_id").val(), selectedLocValue = "", MRP.StringUtil.hasData(e("#" + t.widgetId + "-location_select_id").attr("geoLocationJson")))) {
                                selectedLocObj = e("#" + t.widgetId + "-location_select_id").attr("geoLocationJson");
                                for (var a = JSON.parse(selectedLocObj), s = 0; s < a.length; s++) {
                                    var o = a[s],
                                        i = a[s].type;
                                    "locality" === i ? searchUrl += "Locality/" + o.name + "---coords=" + o.lat + "," + o.lng + "/" : "administrative_area_level_1" === i ? searchUrl += "State/" + o.name + "---" + o.code + "/" : "country" === i && (searchUrl += "Country/" + o.name + "---" + o.code + "/")
                                }
                            }
                            var n = uriSafe(e("#" + t.widgetId + "-keywords").val());
                            n.search("-") > -1 && (n = n.replace(/-/g, "%20")), searchUrl += e("#" + t.widgetId + "-keywords").val() ? "Keywords/" + n + "/" : "", searchUrl == t.searchUrl && (searchUrl = searchUrl.replace("query/", "")), location.href = searchUrl
                        }
                    }
                };
            return this.each(function(t) {
                return i[t] ? i[t].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof t && t ? void e.error("Method " + t + " does not exist on jQuery.adlogicSearchWidget") : i.init.apply(this, arguments)
            })
        }
    })
}(jQuery);