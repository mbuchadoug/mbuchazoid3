const mongoose = require('mongoose');
var bcrypt = require('bcrypt-nodejs');

var userSchema = new mongoose.Schema({
    name:{type:String,required:true},
    surname:{type:String,},
    role:{type:String,required:true},
    role1:{type:String},
    hostel:{type:String},
    hostelId:{type:String},
    hostelType:{type:String},
    hostelCapacity:{type:String},
    hostelCode:{type:String},
    hostelHead:{type:String},
    questNo:{type:Number},
    studentEmail:{type:String},
    studentName:{type:String},
   studentId:{type:String},
   invoiceId:{type:String},
   invoUrl:{type:String},
    gender:{type:String,required:true},
    fullname:{type:String,required:true},
    dob:{type:String,required:true},
    grade:{type:Number, required:true},
    uid:{type:String, required:true},
    industry:{type:String, },
    class1:{type:String, required:true},
    classLength:{type:Number, required:true},
    classNo:{type:Number, required:true},
    studentNum:{type:Number, required:true},
    uidNum:{type:Number, required:true},
    possibleMark:{type:Number, required:true},
    studentId:{type:String, required:true},
    parentId:{type:String},
    regId:{type:String},
    teacherName:{type:String, required:true},
    teacherId:{type:String, required:true},
    examDate:{type:String, required:true},
    feeStatus:{type:String, required:true},
    feesUpdate:{type:String, required:true},
    year:{type:Number, required:true},
    balance:{type:Number, required:true},
   portalBalance:{type:Number},
    balance2:{type:Number},
    balanceCarriedOver:{type:Number, required:true},
    status:{type:String, required:true},
    state:{type:String,},
    paymentId:{type:String, required:true},
    term:{type:Number, required:true},
    mobile:{type:String, },
    mobile2:{type:String, },
    prefix:{type:String, required:true},
    suffix:{type:String, required:true},
    amount:{type:Number, required:true},
    receiptNumber:{type:Number, required:true},
    children:{type:Number},
    photo:{type:String},
    duration:{type:Number},
    level:{type:Number, required:true},
    levelX:{type:String, required:true},
    type:{type:String, required:true},
    address:{type:String,},
    address1:{type:String,},
    address2:{type:String,},
    dept:{type:String, required:true},
    subject:{type:Number, required:true},
    pollUrl:{type:String, required:true},
    pollUrl2:{type:String, required:true},
    annual:{type:Number, required:true},
    fees:{type:Number,required:true},
    paynow:{type:Number,required:true},
    schoolName:{type:String,required:true},
    companyId:{type:String,required:true},
    subjectCode:{type:String, required:true},
    subjects:{type:String, required:true},
    text:{type:String},
    textSalt:{type:String},
    accountStatus:{type:String,},
    password:{type:String,required:true},
    expdate: {type: String,required:true},
    expStr:{type:String,required:true},
    number:{type:Number, required:true},
    recNumber:{type:Number, required:true},
    idNumber:{type:Number, required:true},
    email:{type:String, required:true},
    email2:{type:String},
    topic:{type:String, required:true},
    testId:{type:String, required:true},
   status3:{type:String, required:true},
    status4:{type:String, required:true},
    pollCount:{type:Number, required:true},
    count:{type:Number, required:true},
    idNumX:{type:Number, required:true},
    actualCount:{type:Number, required:true},
    admissionYear:{type:Number, required:true},
    startYear:{type:Number, required:true},
    stdYearCount:{type:Number,required:true},
    currentYearCount:{type:Number, required:true},
    quizId:{type:String, required:true},
    quizBatch:{type:Number, required:true},
    quizNo:{type:Number, required:true},
    inboxNo:{type:Number, required:true},
    quizDuration:{type:Number, required:true},
    subjectNo:{type:Number, required:true},
    icon:{type:String, required:true},
    salutation:{type:String},
    companyId:{type:String},
    alumniYearCount:{type:Number},
    alumniLevel:{type:Number},
    accountStatus:{type:String},
    accountType:{type:String},
    reportId:{type:String},
    reportClass:{type:String},
    reportYear:{type:String},
    reportMonth:{type:String},
    classReportId:{type:String},
    room:{type:String},
    cashBalance:{type:Number},
    regCode:{type:String},
    hostelMonth:{type:String},
    hostelYear:{type:Number},
    hostelTerm:{type:Number},
    hostelFloor:{type:String},
    demerit:{type:Number},
    merit:{type:Number},
    floor:{type:String},
    invoCode:{type:String},
    invoNumber:{type:Number},
    quoteCode:{type:String},
    num:{type:Number},
    recNum:{type:Number},
    discount:{type:Number},
    clientName:{type:String},
    companyName:{type:String},
    companyEmail:{type:String},
    companyAddress:{type:String},
    companyCity:{type:String},
    companyMobile:{type:String},
    companyCountry:{type:String},
    countN:{type:Number},
    studentNumber:{type:Number},
    invoiceGrade:{type:String},
    sibling:{type:String},
    truckCode:{type:String},
    truckId:{type:String},
    
});

// Custom validation for email
userSchema.methods.encryptPassword = function(password) {
    return bcrypt.hashSync(password, bcrypt.genSaltSync(5), null);  
  };
  
  userSchema.methods.validPassword = function(password) {
    return bcrypt.compareSync(password, this.password);  
  };

module.exports = mongoose.model('User', userSchema);